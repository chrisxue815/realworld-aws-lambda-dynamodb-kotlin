service: realworld-kotlin

frameworkVersion: '>=1.68.0 <2.0.0'

provider:
  name: aws
  runtime: java11
  timeout: 30
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-west-2"}
  environment:
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:BatchGetItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

package:
  artifact: build/libs/realworld-kotlin-${self:provider.stage}-all.jar

functions:
  user-post:
    handler: com.serverless.route.userPost.Handler
    events:
      - http:
          path: users
          method: post
          cors: true

  users-login-post:
    handler: com.serverless.route.userLoginPost.Handler
    events:
      - http:
          path: users/login
          method: post
          cors: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-user
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:  # GET /user, GET /profiles/:username
          - AttributeName: username
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    EmailUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-email-user
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:  # POST /users/login
          - AttributeName: email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
